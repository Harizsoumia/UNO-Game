import javax.swing.*;
import java.awt.*;
//====================================classe du jFrame personalisée =============================================================================================
public class CustomFrame extends Jframe {
    
    private ImageIcon icon;
    
    public CustomFrame() {
        // Configuration du JPanel avec fond bleu ciel
        this.setBackground(new Color(135, 206, 235)); // Couleur bleu ciel (Sky Blue)
        this.setLayout(new FlowLayout(FlowLayout.RIGHT)); // Layout horizontal, aligné à gauche
        
        // Chargement et redimensionnement de l'icône
        try {
            ImageIcon originalIcon = new ImageIcon("C:\\Users\\manel\\OneDrive\\Images\\Screenshots\\logo.png");
            Image image = originalIcon.getImage();
            Image resizedImage = image.getScaledInstance(24, 24, Image.SCALE_SMOOTH);
            icon = new ImageIcon(resizedImage);
            
            // Ajout de l'icône au panel sous forme de JLabel
            JLabel iconLabel = new JLabel(icon);
            this.add(iconLabel);
            
            // Vous pouvez ajouter un texte après l'icône pour démontrer l'alignement horizontal
            JLabel textLabel = new JLabel("مرحب");
            textLabel.setForeground(Color.WHITE); // Texte en blanc pour contraste
            textLabel.setFont(new Font("Arial", Font.BOLD, 14));
            this.add(textLabel);
            
        } catch (Exception e) {
            System.out.println("Erreur lors du chargement de l'icône: " + e.getMessage());
        }
          // Ajouter un bouton de fermeture à la barre de titre
        JButton closeButton = new JButton("×");
        closeButton.setForeground(Color.WHITE);
        closeButton.setFont(new Font("Arial", Font.BOLD, 16));
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setFocusPainted(false);
        closeButton.addActionListener(e -> System.exit(0));
        this.add(closeButton);
    }

   
}






//======================================class du jframe personaliséeees===================================================================================



import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

public class CustomFrame extends JFrame {
    
    private NewClass titleBar;
    private JPanel contentPanel;
    private Point initialClick;
    private boolean isResizing = false;
    
    public CustomFrame() {
        // Supprimer la décoration standard de la fenêtre
        setUndecorated(true);
        
        // Créer un layout principal
        setLayout(new BorderLayout());
        
        // Initialiser la barre de titre personnalisée
        titleBar = new NewClass();
        titleBar.setPreferredSize(new Dimension(getWidth(), 40)); // Hauteur de 40px pour la barre de titre
        
        
        
        // Ajouter la fonctionnalité de déplacement de la fenêtre
        addMoveWindowListener();
        
        // Créer un panel pour le contenu
        contentPanel = new JPanel();
        contentPanel.setBackground(Color.WHITE);
        contentPanel.setLayout(new BorderLayout());
        
        // Ajouter un texte d'exemple dans le panel de contenu
        JLabel exampleLabel = new JLabel("الترلتبالؤ", SwingConstants.CENTER);
        exampleLabel.setFont(new Font("Arial", Font.PLAIN, 18));
        contentPanel.add(exampleLabel, BorderLayout.CENTER);
        
        // Ajouter une bordure pour l'effet visuel
        getRootPane().setBorder(BorderFactory.createLineBorder(new Color(100, 181, 246), 2));
        
        // Ajouter les composants à la frame
        add(titleBar, BorderLayout.NORTH);
        add(contentPanel, BorderLayout.CENTER);
        
        // Ajouter des écouteurs pour le redimensionnement
        addResizeListener();
        
        // Configurer la taille et la position de la fenêtre
        setSize(800, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    
    private void addControlButtons() {
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 5, 5));
        buttonPanel.setOpaque(false);
        
        // Bouton Réduire
        JButton minimizeBtn = createButton("−", new Color(135, 206, 235));
        minimizeBtn.addActionListener(e -> setState(JFrame.ICONIFIED));
        
        // Bouton Agrandir/Restaurer
        JButton maximizeBtn = createButton("□", new Color(135, 206, 235));
        maximizeBtn.addActionListener(e -> {
            if (getExtendedState() != JFrame.MAXIMIZED_BOTH) {
                setExtendedState(JFrame.MAXIMIZED_BOTH);
            } else {
                setExtendedState(JFrame.NORMAL);
            }
        });
        
        // Bouton Fermer
        JButton closeBtn = createButton("×", new Color(135, 206, 235));
        closeBtn.addActionListener(e -> System.exit(0));
        
        buttonPanel.add(minimizeBtn);
        buttonPanel.add(maximizeBtn);
        buttonPanel.add(closeBtn);
        
        titleBar.add(buttonPanel);
    }
    
    private JButton createButton(String text, Color bgColor) {
        JButton button = new JButton(text);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setFont(new Font("Arial", Font.BOLD, 16));
        button.setForeground(Color.WHITE);
        button.setPreferredSize(new Dimension(30, 25));
        
        // Hover effect
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                if (text.equals("×")) {
                    button.setForeground(Color.RED);
                } else {
                    button.setForeground(Color.LIGHT_GRAY);
                }
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                button.setForeground(Color.WHITE);
            }
        });
        
        return button;
    }
    
    private void addMoveWindowListener() {
        titleBar.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                initialClick = e.getPoint();
                getComponentAt(initialClick);
            }
        });
        
        titleBar.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                // Si la fenêtre est maximisée, on la restaure d'abord
                if (getExtendedState() == JFrame.MAXIMIZED_BOTH) {
                    setExtendedState(JFrame.NORMAL);
                    return;
                }
                
                // Récupérer la position actuelle de la souris
                int thisX = getLocation().x;
                int thisY = getLocation().y;
                
                // Déterminer le déplacement
                int xMoved = e.getX() - initialClick.x;
                int yMoved = e.getY() - initialClick.y;
                
                // Déplacer la fenêtre
                int X = thisX + xMoved;
                int Y = thisY + yMoved;
                setLocation(X, Y);
            }
        });
    }
    
    private void addResizeListener() {
        // Définir une zone de bord où le redimensionnement est activé
        int border = 5;
        
        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                isResizing = true;
                initialClick = e.getPoint();
            }
            
            @Override
            public void mouseReleased(MouseEvent e) {
                isResizing = false;
            }
        });
        
        addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int x = e.getX();
                int y = e.getY();
                int width = getWidth();
                int height = getHeight();
                
                // Définir le curseur selon la position
                if (x >= width - border && y >= height - border) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR));
                } else if (x >= width - border) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR));
                } else if (y >= height - border) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR));
                } else {
                    setCursor(Cursor.getDefaultCursor());
                }
            }
            
            @Override
            public void mouseDragged(MouseEvent e) {
                if (isResizing && getCursor() != Cursor.getDefaultCursor()) {
                    int newWidth = getWidth();
                    int newHeight = getHeight();
                    
                    if (getCursor() == Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR)) {
                        newWidth = e.getX();
                    } else if (getCursor() == Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR)) {
                        newHeight = e.getY();
                    } else if (getCursor() == Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR)) {
                        newWidth = e.getX();
                        newHeight = e.getY();
                    }
                    
                    if (newWidth >= 300 && newHeight >= 200) {
                        setSize(newWidth, newHeight);
                        validate();
                        repaint();
                    }
                }
            }
        });
    }
    
}

//=====================================================class du jdialoque personalisée===================================================================
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class CustomDialog extends JDialog {
    
    private NewClass titleBar;
    private JPanel contentPanel;
    private Point initialClick;
    private boolean isResizing = false;
    
    public CustomDialog(Frame owner, boolean modal) {
        super(owner, modal);
        
        // Supprimer la décoration standard de la boîte de dialogue
        setUndecorated(true);
        
        // Créer un layout principal
        setLayout(new BorderLayout());
        
        // Initialiser la barre de titre personnalisée (utilisant NewClass)
        titleBar = new NewClass();
        titleBar.setPreferredSize(new Dimension(getWidth(), 40)); // Hauteur de 40px pour la barre de titre
        
        
        
        // Ajouter la fonctionnalité de déplacement de la boîte de dialogue
        addMoveWindowListener();
        
        // Créer un panel pour le contenu
        contentPanel = new JPanel();
        contentPanel.setBackground(Color.WHITE);
        contentPanel.setLayout(new BorderLayout());
        
        // Ajouter un texte d'exemple dans le panel de contenu
        JLabel exampleLabel = new JLabel("Contenu de la boîte de dialogue", SwingConstants.CENTER);
        exampleLabel.setFont(new Font("Arial", Font.PLAIN, 18));
        contentPanel.add(exampleLabel, BorderLayout.CENTER);
        
        // Ajouter une bordure pour l'effet visuel
        getRootPane().setBorder(BorderFactory.createLineBorder(new Color(100, 181, 246), 2));
        
        // Ajouter les composants à la dialog
        add(titleBar, BorderLayout.NORTH);
        add(contentPanel, BorderLayout.CENTER);
        
        // Ajouter des écouteurs pour le redimensionnement
        addResizeListener();
        
        // Configurer la taille et la position de la boîte de dialogue
        setSize(400, 300);
        setLocationRelativeTo(owner);
        setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    }
    
    private void addControlButtons() {
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 5, 5));
        buttonPanel.setOpaque(false);
        
        // Bouton Fermer
        JButton closeBtn = createButton("×", new Color(135, 206, 235));
        closeBtn.addActionListener(e -> dispose());
        
        buttonPanel.add(closeBtn);
        
        titleBar.add(buttonPanel);
    }
    
    private JButton createButton(String text, Color bgColor) {
        JButton button = new JButton(text);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setFont(new Font("Arial", Font.BOLD, 16));
        button.setForeground(Color.WHITE);
        button.setPreferredSize(new Dimension(30, 25));
        
        // Hover effect
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                if (text.equals("×")) {
                    button.setForeground(Color.RED);
                } else {
                    button.setForeground(Color.LIGHT_GRAY);
                }
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                button.setForeground(Color.WHITE);
            }
        });
        
        return button;
    }
    
    private void addMoveWindowListener() {
        titleBar.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                initialClick = e.getPoint();
                getComponentAt(initialClick);
            }
        });
        
        titleBar.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                // Récupérer la position actuelle de la souris
                int thisX = getLocation().x;
                int thisY = getLocation().y;
                
                // Déterminer le déplacement
                int xMoved = e.getX() - initialClick.x;
                int yMoved = e.getY() - initialClick.y;
                
                // Déplacer la boîte de dialogue
                int X = thisX + xMoved;
                int Y = thisY + yMoved;
                setLocation(X, Y);
            }
        });
    }
    
    private void addResizeListener() {
        // Définir une zone de bord où le redimensionnement est activé
        int border = 5;
        
        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                isResizing = true;
                initialClick = e.getPoint();
            }
            
            @Override
            public void mouseReleased(MouseEvent e) {
                isResizing = false;
            }
        });
        
        addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int x = e.getX();
                int y = e.getY();
                int width = getWidth();
                int height = getHeight();
                
                // Définir le curseur selon la position
                if (x >= width - border && y >= height - border) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR));
                } else if (x >= width - border) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR));
                } else if (y >= height - border) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR));
                } else {
                    setCursor(Cursor.getDefaultCursor());
                }
            }
            
            @Override
            public void mouseDragged(MouseEvent e) {
                if (isResizing && getCursor() != Cursor.getDefaultCursor()) {
                    int newWidth = getWidth();
                    int newHeight = getHeight();
                    
                    if (getCursor() == Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR)) {
                        newWidth = e.getX();
                    } else if (getCursor() == Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR)) {
                        newHeight = e.getY();
                    } else if (getCursor() == Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR)) {
                        newWidth = e.getX();
                        newHeight = e.getY();
                    }
                    
                    if (newWidth >= 200 && newHeight >= 150) {
                        setSize(newWidth, newHeight);
                        validate();
                        repaint();
                    }
                }
            }
        });
    }
    
   
}


//================================================class de jpanel personalisée =====================================================================
import javax.swing.*;
import java.awt.*;

public class CustomPanel extends JPanel {

    private int cornerRadius;
    private Color baseColor = new Color(0, 0, 0); // noir par défaut

    public CustomPanel() {
        this.cornerRadius = 50;
        setOpaque(false);
    }

    // Permet de changer la couleur de base (ex: violet, bleu...)
    public void setBaseColor(Color baseColor) {
        this.baseColor = baseColor;
        repaint(); // Redessine le composant
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        Graphics2D g2 = (Graphics2D) g.create();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Dégradé basé sur la couleur choisie, du semi-transparent au transparent
        GradientPaint gradient = new GradientPaint(
            0, 0, new Color(baseColor.getRed(), baseColor.getGreen(), baseColor.getBlue(), 250),
            getWidth(), 0, new Color(baseColor.getRed(), baseColor.getGreen(), baseColor.getBlue(), 60)
        );

        g2.setPaint(gradient);
        g2.fillRoundRect(0, 0, getWidth(), getHeight(), cornerRadius, cornerRadius);

        g2.dispose();
    }

    
    
    
}






























